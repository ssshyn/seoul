# github repository actions 페이지에 나타날 이름
name: CI/CD for Seoulmate Project

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --no-cache -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/seoulmate .
          docker push ${{ secrets.DOCKER_USERNAME }}/seoulmate

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST }}  # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            # 기존에 'seoulmate'라는 이름을 가진 컨테이너가 있으면 중지하고 제거
            container_id=$(sudo docker ps -q --filter "name=seoulmate")
            if [ -n "$container_id" ]; then
              echo "Stopping and removing existing container with ID $container_id"
              sudo docker stop $container_id
              sudo docker rm -f $container_id
            else
              echo "No running container to stop"
            fi
            
            # 최신 Docker 이미지 다운로드
            echo "Pulling the latest Docker image"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/seoulmate:latest
            
            # 이미 seoulmate라는 이름의 컨테이너가 존재하는지 확인 후 삭제
            existing_container=$(sudo docker ps -a -q --filter "name=seoulmate")
            if [ -n "$existing_container" ]; then
            echo "Removing old container with ID $existing_container"
            sudo docker rm -f $existing_container
            fi
            
            # 새로운 Docker 컨테이너 실행
            echo "Running the new Docker container"
            sudo docker run -d -p 8081:8081 --name seoulmate ${{ secrets.DOCKER_USERNAME }}/seoulmate
          

      ## deploy to production
#      - name: Deploy to prod
#        uses: appleboy/ssh-action@master
#        id: deploy-prod
#        if: contains(github.ref, 'main')
#        with:
#          host: ${{ secrets.HOST }} # EC2 퍼블릭 IPv4 DNS
#          username: ubuntu
#          key: ${{ secrets.PRIVATE_KEY }}
#          envs: GITHUB_SHA
#          script: |
#            sudo docker ps -q --filter "name=seoulmate" | grep -q . && sudo docker stop seoulmate && sudo docker rm -f seoulmate || echo "No running container to stop"
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/seoulmate
#            sudo docker run -d -p 8081:8081 --name seoulmate ${{ secrets.DOCKER_USERNAME }}/seoulmate
#            sudo docker container prune -f
#            sudo docker image prune -f